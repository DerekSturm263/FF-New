enum States
{
    Default,
    Jump,
    Crouch,
    LookUp,
    Dodge,
    Block,
    Burst,
    Emote,
    Sub,
    Ultimate,
    Interact,
    Primary,
    Secondary,
    Dead,
    Knockback,
    KnockedOver
}

[System.Flags]
enum StatesFlag
{
    Default = 1,
    Jump = 2,
    Crouch = 4,
    LookUp = 8,
    Dodge = 16,
    Block = 32,
    Burst = 64,
    Emote = 128,
    Sub = 256,
    Ultimate = 512,
    Interact = 1024,
    Primary = 2048,
    Secondary = 4096,
    Dead = 8192,
    Knockback = 16384,
    KnockedOver = 32768
}

[System.Flags]
enum Colliders
{
    Ground = 1,
    LeftWall = 2,
    RightWall = 4,
    Ceiling = 8
}

enum JumpType
{
    ShortHop,
    FullHop,
    Aerial
}

enum DodgeType
{
    Spot,
    RollForward,
    RollBackward,
    Aerial
}

component CharacterController
{
    // General
	asset_ref<Behavior> Behavior;
	asset_ref<MovementSettings> Settings;
    bool CanInput;
    Colliders NearbyColliders;
    int MovementDirection;

    // State Handling
    Direction DirectionEnum;
    FPVector2 DirectionValue;
    asset_ref<PlayerState> CurrentState;
    asset_ref<PlayerState> NextState;
    StatesFlag PossibleStates;
    int StateTime;
    int NextStateTime;
    Input LastFrame;

    // Knockback
    FPVector2 OriginalPosition;
    KnockbackInfo DeferredKnockback;
    KnockbackInfo CurrentKnockback;
    KnockbackInfo OldKnockback;

    // Move
    FP Velocity;
    FP MovingLerp;

    // Jump
    bool GroundedJump;
    JumpType JumpType;
    short JumpCount;
    
    // Dodge
    bool GroundedDodge;
    DodgeType DodgeType;
    short DodgeCount;

    // Interacting
    bool IsThrowing;
    bool HasSubWeapon;
    FP ThrowMultiplier;

    // Animation Events
	int HeldAnimationFrameTime;
	int MaxHoldAnimationFrameTime;
    int HoldButton;
    bool ButtonHeld;
    FPVector2 ApplyPhysicsPosition;
    bool PressedButton;

    // Readiness
    bool IsReady;
    FP ReadyTime;
	
    // Ultimate
    int UltimateTime;

    // Miscellaneous
    entity_ref DigitalDouble;
}
