// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
// </auto-generated>

namespace Quantum.Editor {
  using Quantum;
  using UnityEngine;
  using UnityEditor;

  [CustomPropertyDrawer(typeof(AssetRefApparelModifier))]
  public class AssetRefApparelModifierPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(ApparelModifierAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefApparelPattern))]
  public class AssetRefApparelPatternPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(ApparelPatternAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefApparelTemplate))]
  public class AssetRefApparelTemplatePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(ApparelTemplateAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefBadge))]
  public class AssetRefBadgePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(BadgeAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefCameraSettings))]
  public class AssetRefCameraSettingsPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(CameraSettingsAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefCustomAnimatorGraph))]
  public class AssetRefCustomAnimatorGraphPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(CustomAnimatorGraphAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefEmote))]
  public class AssetRefEmotePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(EmoteAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefEyes))]
  public class AssetRefEyesPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(EyesAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefFFAvatar))]
  public class AssetRefFFAvatarPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(FFAvatarAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefFrameEvent))]
  public class AssetRefFrameEventPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(FrameEventAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefGizmo))]
  public class AssetRefGizmoPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(GizmoAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefHair))]
  public class AssetRefHairPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(HairAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefInfoAsset))]
  public class AssetRefInfoAssetPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(InfoAssetAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefItem))]
  public class AssetRefItemPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(ItemAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefMainWeaponEnhancer))]
  public class AssetRefMainWeaponEnhancerPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(MainWeaponEnhancerAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefMainWeaponMaterial))]
  public class AssetRefMainWeaponMaterialPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(MainWeaponMaterialAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefMainWeaponTemplate))]
  public class AssetRefMainWeaponTemplatePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(MainWeaponTemplateAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefMovementSettings))]
  public class AssetRefMovementSettingsPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(MovementSettingsAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefQuantumAnimationEvent))]
  public class AssetRefQuantumAnimationEventPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(QuantumAnimationEventAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefStageAsset))]
  public class AssetRefStageAssetPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(StageAssetAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefStatusEffect))]
  public class AssetRefStatusEffectPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(StatusEffectAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefSubWeaponEnhancer))]
  public class AssetRefSubWeaponEnhancerPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(SubWeaponEnhancerAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefSubWeaponTemplate))]
  public class AssetRefSubWeaponTemplatePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(SubWeaponTemplateAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefUltimate))]
  public class AssetRefUltimatePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(UltimateAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefWinCondition))]
  public class AssetRefWinConditionPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(WinConditionAsset));
    }
  }

  [CustomPropertyDrawer(typeof(Quantum.QString16))]
  partial class QStringDrawer {}

  [CustomPropertyDrawer(typeof(Quantum.Prototypes.Colliders_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.Direction_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.HurtboxType_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.ParentType_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.StagePickerType_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.States_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.InputButtons_Prototype))]
  partial class PrototypeDrawer {}
}
