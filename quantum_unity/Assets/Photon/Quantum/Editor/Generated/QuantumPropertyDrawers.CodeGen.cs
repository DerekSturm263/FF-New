// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
// </auto-generated>

namespace Quantum.Editor {
  using Quantum;
  using UnityEngine;
  using UnityEditor;

  [CustomPropertyDrawer(typeof(AssetRefBadge))]
  public class AssetRefBadgePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(BadgeAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefBuildAsset))]
  public class AssetRefBuildAssetPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(BuildAssetAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefCameraSettings))]
  public class AssetRefCameraSettingsPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(CameraSettingsAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefColorPalette))]
  public class AssetRefColorPalettePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(ColorPaletteAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefCustomAnimatorGraph))]
  public class AssetRefCustomAnimatorGraphPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(CustomAnimatorGraphAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefEmote))]
  public class AssetRefEmotePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(EmoteAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefFFAvatar))]
  public class AssetRefFFAvatarPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(FFAvatarAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefFrameEvent))]
  public class AssetRefFrameEventPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(FrameEventAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefGizmo))]
  public class AssetRefGizmoPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(GizmoAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefHeadPiece))]
  public class AssetRefHeadPiecePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(HeadPieceAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefItem))]
  public class AssetRefItemPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(ItemAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefMainWeapon))]
  public class AssetRefMainWeaponPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(MainWeaponAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefMovementSettings))]
  public class AssetRefMovementSettingsPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(MovementSettingsAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefOutfitPiece))]
  public class AssetRefOutfitPiecePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(OutfitPieceAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefQuantumAnimationEvent))]
  public class AssetRefQuantumAnimationEventPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(QuantumAnimationEventAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefRulesetAsset))]
  public class AssetRefRulesetAssetPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(RulesetAssetAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefSkill))]
  public class AssetRefSkillPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(SkillAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefStageAsset))]
  public class AssetRefStageAssetPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(StageAssetAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefStatusEffect))]
  public class AssetRefStatusEffectPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(StatusEffectAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefSubWeapon))]
  public class AssetRefSubWeaponPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(SubWeaponAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefUltimate))]
  public class AssetRefUltimatePropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(UltimateAsset));
    }
  }

  [CustomPropertyDrawer(typeof(AssetRefWinCondition))]
  public class AssetRefWinConditionPropertyDrawer : PropertyDrawer {
    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {
      AssetRefDrawer.DrawAssetRefSelector(position, property, label, typeof(WinConditionAsset));
    }
  }

  [CustomPropertyDrawer(typeof(Quantum.Prototypes.Colliders_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.Direction_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.HurtboxType_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.ParentType_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.StagePickerType_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.States_Prototype))]
  [CustomPropertyDrawer(typeof(Quantum.Prototypes.InputButtons_Prototype))]
  partial class PrototypeDrawer {}
}
